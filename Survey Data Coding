---
title: "Survey Title"
author: "Authors' Names"
 
date: "`r format(Sys.Date(),format = '%B %d, %Y')`"
output: pdf_document
fontsize: 12pt
classoption: 
  - landscape
header-includes: 
  - \renewcommand{\and}{\\}
  - \usepackage{helvet}
  - \renewcommand{\familydefault}{\sfdefault}
urlcolor: blue
---


```{r setup, include=FALSE}
require("knitr")
require("summarytools")
require("formatR")
knitr::opts_chunk$set(echo = F, warning=FALSE, message = FALSE, comment=NA,prompt = FALSE, cache = FALSE, results = 'asis',tidy.opts = list(width.cutoff = 80), tidy = TRUE)

st_options(bootstrap.css     = FALSE,       # Already part of the theme so no need for it
           plain.ascii       = FALSE,       # One of the essential settings
           style             = "rmarkdown", # Idem.
           dfSummary.silent  = TRUE,        # Suppresses messages about temporary files
           footnote          = NA,          # Keeping the results minimalistic
           subtitle.emphasis = FALSE)       # For the vignette theme, this gives better results.
                                            # For other themes, using TRUE might be preferable.

st_css()
```


```{r LoadPackages}
library(readxl)
library(readr)
library(Hmisc)
library(lubridate)
library(stringr)
library(plyr)
library(dplyr)
library(labelled)
library(haven)
```


```{r ImportData}

#------------------------------------------------------------------------------------------------------------------------------------------------------
#IMPORTANT - This code will only work if the raw data has been exported using the correct export settings! You can find the necessary settings here: 
#------------------------------------------------------------------------------------------------------------------------------------------------------
 
dat <- read_csv("your/local/path/to/data.csv")

 
code <-  read_excel("your/local/path/to/data.csv")

#Edit this list to include all variations of Don't Know, Refuse to Answer, that exist in the survey (categorical variables)
values_and_codes = list(values = c("I don't know/RA","Don't know/RA","Don't Know/Refuse","I don't know/Refuse to answer", "Don't know/refuse to answer"),
                        codes = c(98,98,98,98,98)) 

#Unlike categorical variables where we use 97,98, and 99 to encode DKRA, we use 997, 998, and 999 for numeric variables since 97-98 could be possible answers to numeric questions while -1 to -3 are almost certainly not true values since we don't work with negative quantities. But be careful! If these could be true data values, pick other values. 
values_and_codes_num = c("Don't know/Refuse to Answer" = "-3","Don't know/RA" = "-3","Don't know/RA" = "-3")
```

## FUNCTIONS
```{r Helper Functions}
#For each variable we need to perform 2 tasks: 1) created a "clean" version of the variable and 2) Add the question name and text to the vector of label information. The functions in this section will make that easier. 

#There are 6 types of variables: free text (no cleaning necessary), numeric (minor cleaning needed), single choice (simple cleaning), multi-select, single choice grid, multi-select grid, and ratings.

#FREE TEXT
free.text <- function(raw.num,new.num,prefix = "fact_",df = dat,codebook = code){
  #Old Name
  old.name = paste("Q_",raw.num,sep = "")
  #New Name
  new.name = paste(prefix,new.num,sep = "")
  
  #Clean Variable (no cleaning necessary, just rename the variable)
  df = df %>% dplyr::mutate(!!new.name := as.character(!!as.name(old.name)))
  #Add label to new variable
  my.vec = codebook$Text[min(which(codebook$`Question Index` == raw.num))]
  df = df %>% set_variable_labels(!!new.name := my.vec)
  
  return(df)
}

#FREE TEXT GRID
free.text.grid <- function(raw.num, new.num, num.topics, prefix = "fact_", df = dat, codebook = code) {
  for (i in 1:num.topics) {
    # Old Name
    old.name = paste("T_", raw.num, "_", i, sep = "")
    # New Name
    new.name = paste(prefix, new.num, "_", i, sep = "")
    
    # Clean Variable (no cleaning necessary, just rename the variable)
    df = df %>% dplyr::mutate(!!new.name := as.character(!!as.name(old.name)))
    
    # Add label to new variable
    my.vec = paste(codebook$Text[min(which(codebook$`Question Index` == raw.num))], 
                   ": ", codebook$Text[min(which(codebook$`Question Index` == raw.num)) + i], sep = "")
    df = df %>% set_variable_labels(!!new.name := my.vec)
  }
  
  return(df)
}


#NUMERIC
#-------All numeric variables are exported as string variables.
numeric.var <- function(raw.num,new.num,prefix = "fact_q",df = dat,codebook = code,dkra.list = values_and_codes_num){
  #Old Name
  old.name = paste("Q_",raw.num,sep = "")
  #New Name
  new.name = paste(prefix,new.num,sep = "")
  
  #Clean Variable
  df = df %>% dplyr::mutate(!!new.name := as.numeric(gsub("NA",NA,str_replace_all(!!as.name(old.name),dkra.list))))
  #Add label to new variable
  my.vec = codebook$Text[min(which(codebook$`Question Index` == raw.num))]
  df = df %>% set_variable_labels(!!new.name := my.vec)
  
  return(df)
}

# NUMERIC LOOP
numeric.loop <- function(raw.num, new.num, loop.names, other = FALSE, prefix = "q", df = dat, codebook = code) {
  for (i in 1:length(loop.names)) {
    # Old Name
    old.name <- paste(loop.names[i], "_Q_", raw.num, sep = "")
    # New Name
    new.name <- paste(prefix, new.num, "_", loop.names[i], sep = "")

    # Copy numeric variable
    df <- df %>%
      dplyr::mutate(!!new.name := !!as.name(old.name))

    # Add label to new variable
    my.vec <- codebook$Text[min(which(codebook$`Question Index` == raw.num))]
    df <- df %>%
      set_variable_labels(!!new.name := my.vec)

    # Create "Other Specify" Variable + Add Label
    if (other == TRUE) {
      other.name <- paste(new.name, "_O", sep = "")
      other.old.name <- paste(loop.names[i], "_Q_", raw.num, "_S", sep = "")
      df <- df %>%
        dplyr::mutate(!!other.name := !!as.name(other.old.name)) %>%
        set_variable_labels(!!other.name := paste("Other specified value for: ", my.vec, sep = ""))
    }
  }
  return(df)
}


#SINGLE CHOICE
single.choice <- function(raw.num,new.num,other = FALSE,prefix = "fact_q",df = dat,codebook = code){
  #Old Name
  old.name = paste("Q_",raw.num,sep = "")
  #New Name
  new.name = paste(prefix,new.num,sep = "")
  
  #Create the main Variable
  df = df %>% dplyr::mutate(!!new.name := factor(!!as.name(old.name),levels = unique(codebook$Text[(min(which(codebook$`Question Index`==raw.num))+1):max(which(codebook$`Question Index`==raw.num))])))
  #Add label to new variable
  my.vec = codebook$Text[min(which(codebook$`Question Index` == raw.num))]
  df = df %>% set_variable_labels(!!new.name := my.vec)
  
  #Create Other Specify Variable + Add Label
  if(other==TRUE){
    df = df %>% mutate(!!paste(prefix,new.num,"_O",sep = "") := !!as.name(paste("Q_",raw.num,"_S",sep ="")))
    df = df %>% set_variable_labels(!!paste(prefix,new.num,"_O",sep = "") := paste("Other specified value for: ",my.vec, sep = ""))
  }
  
  return(df)
}

#SINGLE CHOICE BUT Question index is lower-cased "q"
single.choice.low <- function(raw.num,new.num,other = FALSE,prefix = "fact_q",df = dat,codebook = code){
  #Old Name
  old.name = paste("q",raw.num,"_",sep = "")
  #New Name
  new.name = paste(prefix,new.num,sep = "")
  
  #Create the main Variable
  df = df %>% dplyr::mutate(!!new.name := factor(!!as.name(old.name),levels = unique(codebook$Text[(min(which(codebook$`Question Index`==raw.num))+1):max(which(codebook$`Question Index`==raw.num))])))
  #Add label to new variable
  my.vec = codebook$Text[min(which(codebook$`Question Index` == raw.num))]
  df = df %>% set_variable_labels(!!new.name := my.vec)
  
  #Create Other Specify Variable + Add Label
  if(other==TRUE){
    df = df %>% mutate(!!paste(prefix,new.num,"_O",sep = "") := !!as.name(paste("q_",raw.num,"_S",sep ="")))
    df = df %>% set_variable_labels(!!paste(prefix,new.num,"_O",sep = "") := paste("Other specified value for: ",my.vec, sep = ""))
  }
  
  return(df)
}

# SINGLE CHOICE LOOP
single.choice.loop <- function(raw.num,new.num,loop.names,other = FALSE,prefix = "q",df = dat,codebook = code){
  for(i in 1:length(loop.names)){
    #Old Name
    old.name = paste("I_",i,"_Q_",raw.num,sep = "")
    #New Name
    new.name = paste(prefix,new.num,"_",loop.names[i],sep = "")

    #Create the main Variable
    df = df %>% dplyr::mutate(!!new.name := factor(!!as.name(old.name),levels = unique(codebook$Text[(min(which(codebook$`Question Index`==raw.num))+1):max(which(codebook$`Question Index`==raw.num))])))

    #Add label to new variable
    my.vec = codebook$Text[min(which(codebook$`Question Index` == raw.num))]
    df = df %>% set_variable_labels(!!new.name := my.vec)

    #Create Other Specify Variable + Add Label
    if(other==TRUE){
      df = df %>% dplyr::mutate(!!paste(new.name,"_O",sep = "") := !!as.name(paste("I_",i,"_Q_",raw.num,"_S",sep ="")))
      df = df %>% set_variable_labels(!!paste(new.name,"_O",sep = "") := paste("Other specified value for: ",my.vec, sep = ""))
    }
  }
  return(df)
}

# Ethnic Groups
ethn.list <- c("Chewa", "Lomwe", "Yao", "Ngoni", "Tumbuka", 
                "Sena", "Mang'anja", "Nyanja", "Tonga", 
                "Nkhonde", "Lambya", "Sukwa", "Senga", "Other", 
                "Don't Know/Refuse")

#SINGLE CHOICE GRID
single.choice.grid <- function(raw.num,new.num,num.topics,other = FALSE,prefix = "fact_q",df = dat,codebook = code){

  #Create the main Variable
  for(i in 1:num.topics){
      #Old Name
      old.name = paste("T_",raw.num,"_",i,sep = "")
      #New Name
      new.name = paste(prefix,new.num,"_",i,sep = "")
      #Create New Variable
      df = df %>% dplyr::mutate(!!new.name := factor(!!as.name(old.name),levels = unique(codebook$Text[(min(which(codebook$`Question Index`==raw.num))+(1+num.topics)):max(which(codebook$`Question Index`==raw.num))])))
      #Label the New Variable
      my.vec = paste(codebook$Text[min(which(codebook$`Question Index` == raw.num))],": ",codebook$Text[(min(which(codebook$`Question Index`==raw.num))+i)])
      df = df %>% set_variable_labels(!!new.name := my.vec)
  }
  
  #Create Other Specify Variable
  if(other==TRUE){
    for(i in 1:num.topics){
      #Create the new variable
      df = df %>% dplyr::mutate(!!paste(prefix,new.num,"_O",i,sep = "") := !!as.name(paste("T_Q_",raw.num,"_",i,"_Q_",raw.num,"_S",sep ="")))
      #Label the new variable
      my.vec = paste(codebook$Text[min(which(codebook$`Question Index` == raw.num))],": ",codebook$Text[(min(which(codebook$`Question Index`==raw.num))+i)])
      df = df %>% set_variable_labels(!!paste(prefix,new.num,"_O",i,sep = "") := paste("Other specified value for: ",my.vec, sep = ""))
    }
  }
  
  return(df)
}

#MULTI SELECT 
multi.select <- function(raw.num, new.num, num.choices, other.vals = NULL, prefix = "fact_q", df = dat, codebook = code) {
  # Loop through each choice in the multi-select question
  for (i in 1:num.choices) {
    # Old variable name for this choice
    old.name <- paste("Q_", raw.num, "_O", i, sep = "")
    # New variable name for this choice
    new.name <- paste(prefix, new.num, "_O", i, sep = "")
    
    # Create new variable and copy data
    df <- df %>% dplyr::mutate(!!new.name := as.numeric(!!as.name(old.name)))
    
    # Add label for the new variable
    label <- paste(codebook$Text[min(which(codebook$`Question Index` == raw.num))], 
                   " - ", 
                   codebook$Text[min(which(codebook$`Question Index` == raw.num)) + i], 
                   sep = "")
    df <- df %>% set_variable_labels(!!new.name := label)
  }
  
  # Handle "Other, please specify" if applicable
  if (!is.null(other.vals)) {
    for (k in 1:length(other.vals)) {
      # Old variable name for "Other, please specify"
      old.name <- paste("S_", raw.num, "_", other.vals[k], sep = "")
      # New variable name for "Other, please specify"
      new.name <- paste(prefix, new.num, "_O", k, sep = "")
      
      # Create new variable and copy data
      df <- df %>% dplyr::mutate(!!new.name := as.character(!!as.name(old.name)))
      
      # Add label for the "Other, please specify" variable
      label <- paste("Other specified value for: ", 
                     codebook$Text[min(which(codebook$`Question Index` == raw.num))], 
                     " - Option ", other.vals[k], 
                     sep = "")
      df <- df %>% set_variable_labels(!!new.name := label)
    }
  }
  
  # Return the cleaned dataframe
  return(df)
}




# Ratings
ratings <- function(raw.num, new.num, options = 1:3, prefix = "fact_q", df = dat, codebook = code) {
  for (opt in options) {
    old.name <- paste("Q_", raw.num, "_O", opt, sep = "")
    new.name <- paste(prefix, new.num, "_O", opt, sep = "")
    
  #Create the main Variable
  df = df %>% dplyr::mutate(!!new.name := factor(!!as.name(old.name),levels = unique(codebook$Text[(min(which(codebook$`Question Index`==raw.num))+1):max(which(codebook$`Question Index`==raw.num))])))
  #Add label to new variable
  my.vec = codebook$Text[min(which(codebook$`Question Index` == raw.num))]
  df = df %>% set_variable_labels(!!new.name := my.vec)
  }
  return(df)
}
```


```{r CleanLogisticData}

dat = dat %>% mutate(SbjNum = as.numeric(SbjNum))
label(dat$SbjNum) = "Unique respondent identifier"

```

```{r}
#-----------------------------------------------------------------
# LOGISTICS QUESTIONS
#-----------------------------------------------------------------

dat=single.choice.low(raw.num =2,new.num=1,other = F,prefix = "fact_q")
label(dat$fact_q1) = "District"
# Manually code other specify value because it has different prefix in the dataset
dat = dat %>% mutate(fact_q1_O = Q_1_S)
label(dat$fact_q1_O) = "Other specified value for District"

dat=single.choice.low(raw.num =4,new.num=2,other = F,prefix = "fact_q")
# q_4_16 is a open-ended question
dat = dat %>% mutate(fact_q2_O = fact_q2_16)
label(dat$fact_q2_O) = "Other specified value for Traditional Authority"

dat=single.choice(raw.num =18,new.num=3,other = T,prefix = "fact_q")
dat=single.choice(raw.num =19,new.num=4,other = T,prefix = "fact_q")
dat=single.choice(raw.num =20,new.num=5,other = T,prefix = "fact_q")
dat=single.choice(raw.num =21,new.num=6,other = T,prefix = "fact_q")
dat=single.choice(raw.num =22,new.num=7,other = T,prefix = "fact_q")
dat=single.choice(raw.num =23,new.num=8,other = T,prefix = "fact_q")
dat=single.choice(raw.num =24,new.num=9,other = T,prefix = "fact_q")
dat=single.choice(raw.num =25,new.num=10,other = T,prefix = "fact_q")
dat=single.choice(raw.num =26,new.num=11,other = T,prefix = "fact_q")
dat=single.choice(raw.num =27,new.num=12,other = T,prefix = "fact_q")

dat=free.text(raw.num =28,new.num=13,prefix = "fact_q")
dat=numeric.var(raw.num =29,new.num=14,prefix = "fact_q")
dat=free.text.grid(raw.num =30,new.num=15,prefix = "fact_q")

#the raw.num for this column does not match the question index in the codebook (should be 31)
dat <- dat %>%
  mutate(
    fact_q16 = factor(fact_q16, levels = c("Rural village", "Small town", "Urban city"))  
  )
label(dat$fact_q16) = "Thinking about THIS village/neighborhood, is this area:"

#q10 is a location coordinates (q10_LA and q10_LO)
dat = dat %>% mutate(fact_q17 = as.numeric(q10_LA))
label(dat$fact_q17) = "Latitude"

dat = dat %>% mutate(fact_q18 = as.numeric(q10_LO))
label(dat$fact_q18) = "Longitude"

dat=single.choice(raw.num =34,new.num=19,other = F,prefix = "fact_q")

dat <- dat %>%
  mutate(
    fact_q20 = factor(fact_q20, levels = c("Male", "Female"))  
  )
label(dat$fact_q20) <- "Interviewer gender"

dat=single.choice(raw.num =36,new.num=21,other = F,prefix = "fact_q")
```

#-----------------------------------------------------------------
# BASIC QUESTIONS
#-----------------------------------------------------------------
```{r}
dat=free.text(raw.num =37,new.num=22,prefix = "fact_q")
dat=free.text(raw.num =38,new.num=23,prefix = "fact_q")
dat=numeric.var(raw.num =39,new.num=24,prefix = "fact_q")
dat=numeric.var(raw.num =40,new.num=25,prefix = "fact_q")
dat=numeric.var(raw.num =41,new.num=26,prefix = "fact_q")
dat=multi.select(raw.num = 42, new.num = 27, num.choices = 5,other.vals = NULL,prefix = "fact_q")
dat <- dat %>%
  mutate(
    fact_q42_O = as.character(q18_other))
label(dat$fact_q42_O) <- "Other specified value for Do these include..."

dat=single.choice(raw.num =43,new.num=28,other = F,prefix = "fact_q")
dat=numeric.var(raw.num =44,new.num=29,prefix = "fact_q")
dat=numeric.var(raw.num =45,new.num=30,prefix = "fact_q")
dat=numeric.var(raw.num =46,new.num=31,prefix = "fact_q")
dat=numeric.var(raw.num =47,new.num=32,prefix = "fact_q")
dat=single.choice(raw.num =49,new.num=34,other = F,prefix = "fact_q")
dat=single.choice(raw.num =50,new.num=35,other = F,prefix = "fact_q")
dat=multi.select(raw.num = 51, new.num = 36, num.choices = 15,other.vals = NULL,prefix = "fact_q")
dat <- dat %>%
  mutate(
    fact_q36_O = as.character(S_40_other))
label(dat$fact_q36_O) <- "Other specified value for What language(s) are spoken in this village/neighborhood?"

dat=ratings(raw.num = 52, new.num = 37, options = 1:2, df = dat, codebook = code)
dat <- dat %>%
  mutate(
    fact_q37_O = as.character(S_26_other))
label(dat$fact_q37_O) <- "Other specified value for Which language is the most dominant/do the majority of people speak in this village/neighborhood?"
```

#-----------------------------------------------------------------
# ETHNIC LOOPS
#-----------------------------------------------------------------
```{r}
dat=multi.select(raw.num = 53, new.num = 38, num.choices = 15,other.vals = NULL,prefix = "fact_q")
dat <- dat %>%
  mutate(
    fact_q38_O = as.character(S_53_other))
label(dat$fact_q38_O) <- "Other specified value for Which ethnic groups do you have in your village/neighborhood?"
dat = single.choice.loop(raw.num = 54, new.num = 39, loop.names = ethn.list, other = TRUE, prefix = "fact_q")
dat = numeric.loop(raw.num = 55, new.num = 40, loop.names = loop.names, other = TRUE, prefix = "fact_q")
```

#-----------------------------------------------------------------
# CLANS INFLUENTIAL RELIGIONS
#-----------------------------------------------------------------
```{r}
dat=numeric.var(raw.num =56,new.num=41,prefix = "fact_q")
dat=multi.select(raw.num = 57, new.num = 42, num.choices = 42,other.vals = c(40),prefix = "fact_q")
dat=ratings(raw.num = 58, new.num = 43, options = 1:3, prefix = "fact_q")

```

## -----------------------------------------------------------------
## FIVE MOST IMPORTANT PEOPLE LOOP
## -----------------------------------------------------------------
```{r}
single.choice.loop.eth <- function(raw.num, new.num, loop.names, prefix = "fact_q", df = dat, codebook = code) {
  for (i in 1:length(loop.names)) {
    # Old Name
    old.name <- paste("#", i, "_Q_", raw.num, sep = "")
    # New Name
    new.name <- paste(prefix, new.num, "_", loop.names[i], sep = "")

    # Transform to factor and add labels
    df <- df %>%
      dplyr::mutate(!!new.name := factor(
        !!as.name(old.name),
        levels = unique(codebook$Text[
          (min(which(codebook$`Question Index` == raw.num)) + 1):max(which(codebook$`Question Index` == raw.num))
        ])
      ))

    # Add label
    my.vec <- codebook$Text[min(which(codebook$`Question Index` == raw.num))]
    df <- df %>%
      set_variable_labels(!!new.name := my.vec)
  }
  return(df)
}

free.text.loop <- function(raw.num, new.num, loop.names, prefix = "fact_q", df = dat, codebook = code) {
  for (i in 1:length(loop.names)) {
    # Old Name
    old.name <- paste("#", i, "_Q_", raw.num, sep = "")
    # New Name
    new.name <- paste(prefix, new.num, "_", loop.names[i], sep = "")

    # Copy text directly
    df <- df %>%
      dplyr::mutate(!!new.name := !!as.name(old.name))

    # Add label
    my.vec <- codebook$Text[min(which(codebook$`Question Index` == raw.num))]
    df <- df %>%
      set_variable_labels(!!new.name := my.vec)
  }
  return(df)
}

multi.select.loop <- function(raw.num, new.num, loop.names, options.range, other = TRUE, prefix = "fact_q", df = dat, codebook = code) {
  for (i in 1:length(loop.names)) {
    for (j in options.range) {
      # Old Name
      old.name <- paste("#", i, "_Q_", raw.num, "_O", j, sep = "")
      # New Name
      new.name <- paste(prefix, new.num, "_", loop.names[i], "_O", j, sep = "")

      # Copy multi-select option
      df <- df %>%
        dplyr::mutate(!!new.name := !!as.name(old.name))

      # Add label for each option
      my.vec <- paste(codebook$Text[min(which(codebook$`Question Index` == raw.num))], "Option ", j, sep = "")
      df <- df %>%
        set_variable_labels(!!new.name := my.vec)
    }

    # Handle "Other" if applicable
    if (other) {
      other.name <- paste("#", i, "_Q_", raw.num, "_other", sep = "")
      new.other.name <- paste(prefix, new.num, "_", loop.names[i], "_other", sep = "")

      df <- df %>%
        dplyr::mutate(!!new.other.name := !!as.name(other.name)) %>%
        set_variable_labels(!!new.other.name := paste("Other specified value for: ", codebook$Text[min(which(codebook$`Question Index` == raw.num))], sep = ""))
    }
  }
  return(df)
}

```


```{r}
five.names <- c("Person1", "Person2", "Person3", "Person4", "Person5")
dat=single.choice.loop.eth(raw.num = 60, new.num = 44, loop.names = five.names)
dat=free.text.loop(raw.num = "71_1", new.num = 45, loop.names = five.names)
dat=free.text.loop(raw.num = 62, new.num = 46, loop.names = five.names)
dat=multi.select.loop(raw.num = 63, new.num = 47, loop.names = five.names, options.range = 1:15, other = TRUE)
dat=single.choice.loop.eth(raw.num = 64, new.num = 48, loop.names = five.names)
```

#-----------------------------------------------------------------
# HEALTH
#-----------------------------------------------------------------
```{r}
dat=free.text(raw.num =65, new.num=49, prefix = "fact_q")
dat=single.choice(raw.num =66, new.num=50, other=F, prefix = "fact_q")
dat=numeric.var(raw.num =67, new.num=51, prefix = "fact_q")
dat=free.text.grid(raw.num =68, new.num=52, prefix = "fact_q")
dat=free.text.grid(raw.num =69, new.num=53, prefix = "fact_q")
dat=single.choice.grid(raw.num = 70, new.num = 54, num.topics = 10, other = FALSE,prefix = "fact_q")
dat=single.choice.grid(raw.num = 71, new.num = 55, num.topics = 10, other = FALSE,prefix = "fact_q")
dat=single.choice.grid(raw.num = 72, new.num = 56, num.topics = 10, other = FALSE,prefix = "fact_q")
dat=free.text.grid(raw.num =73, new.num=57, num.topics = 10,prefix = "fact_q")
```

#-----------------------------------------------------------------
# EDUCATION
#-----------------------------------------------------------------
```{r}
dat=single.choice(raw.num =74, new.num=58, other=F, prefix = "fact_q")
dat=numeric.var(raw.num =75,new.num=59,prefix = "fact_q")
dat=free.text.grid(raw.num =76, new.num=60, num.topics = 7,prefix = "fact_q")
dat=free.text.grid(raw.num =77, new.num=61, num.topics = 10,prefix = "fact_q")
dat=single.choice.grid(raw.num =78, new.num=62, num.topics = 10,prefix = "fact_q")
dat=single.choice.grid(raw.num =79, new.num=63, num.topics = 10,prefix = "fact_q")
dat=single.choice.grid(raw.num =80, new.num=64, num.topics = 10,prefix = "fact_q")
dat=free.text.grid(raw.num =81, new.num=65, num.topics = 10,prefix = "fact_q")
```

#-----------------------------------------------------------------
# EDUCATION
#-----------------------------------------------------------------
```{r}
dat=single.choice(raw.num =82, new.num=66, other=F, prefix = "fact_q")
dat=numeric.var(raw.num =83,new.num=67,prefix = "fact_q")
dat=free.text.grid(raw.num =84, new.num=68, num.topics = 7,prefix = "fact_q")
dat=free.text.grid(raw.num =85, new.num=69, num.topics = 10,prefix = "fact_q")
dat=single.choice.grid(raw.num =86, new.num=70, num.topics = 10,prefix = "fact_q")
dat=single.choice.grid(raw.num =87, new.num=71, num.topics = 10,prefix = "fact_q")
dat=single.choice.grid(raw.num =88, new.num=72, num.topics = 10,prefix = "fact_q")
dat=free.text.grid(raw.num =89, new.num=73, num.topics = 10,prefix = "fact_q")
```

#-----------------------------------------------------------------
# SECURITY
#-----------------------------------------------------------------
```{r}
dat=single.choice(raw.num =90, new.num=74, other=F, prefix = "fact_q")
dat=numeric.var(raw.num =91,new.num=75,prefix = "fact_q")
dat=free.text.grid(raw.num =92, new.num=76, num.topics = 7,prefix = "fact_q")
dat=free.text.grid(raw.num =93, new.num=77, num.topics = 10,prefix = "fact_q")
dat=single.choice.grid(raw.num =94, new.num=78, num.topics = 10,prefix = "fact_q")
dat=single.choice.grid(raw.num =95, new.num=79, num.topics = 10,prefix = "fact_q")
dat=single.choice.grid(raw.num =96, new.num=80, num.topics = 10,prefix = "fact_q")
dat=free.text.grid(raw.num =97, new.num=81, num.topics = 10,prefix = "fact_q")
```

#-----------------------------------------------------------------
# POVERTY
#-----------------------------------------------------------------
```{r}
dat=single.choice(raw.num =98, new.num=82, other=F, prefix = "fact_q")
dat=numeric.var(raw.num =99,new.num=83,prefix = "fact_q")
dat=free.text.grid(raw.num =100, new.num=84, num.topics = 7,prefix = "fact_q")
dat=free.text.grid(raw.num =101, new.num=85, num.topics = 10,prefix = "fact_q")
dat=single.choice.grid(raw.num =102, new.num=86, num.topics = 10,prefix = "fact_q")
dat=single.choice.grid(raw.num =103, new.num=87, num.topics = 10,prefix = "fact_q")
dat=single.choice.grid(raw.num =104, new.num=88, num.topics = 10,prefix = "fact_q")
dat=free.text.grid(raw.num =105, new.num=89, num.topics = 10,prefix = "fact_q")
```

#-----------------------------------------------------------------
# OTHER
#-----------------------------------------------------------------
```{r}
dat=single.choice(raw.num =106, new.num=90, other=F, prefix = "fact_q")
dat=numeric.var(raw.num =107,new.num=91,prefix = "fact_q")
dat=free.text.grid(raw.num =108, new.num=92, num.topics = 7,prefix = "fact_q")
dat=free.text.grid(raw.num =109, new.num=93, num.topics = 10,prefix = "fact_q")
dat=single.choice.grid(raw.num =110, new.num=94, num.topics = 10,prefix = "fact_q")
dat=single.choice.grid(raw.num =111, new.num=95, num.topics = 10,prefix = "fact_q")
dat=single.choice.grid(raw.num =112, new.num=96, num.topics = 10,prefix = "fact_q")
dat=free.text.grid(raw.num =113, new.num=97, num.topics = 10,prefix = "fact_q")
```

#-----------------------------------------------------------------
# VH PRIORITY
#-----------------------------------------------------------------
```{r}
# in dataframe there is value 8
dat$fact_q98_1 <- labelled(dat$Q_114_O1, labels = c(
    "Education" = 1, 
    "Security" = 2, 
    "Health" = 3,
    "Gender" = 4,
    "Alleviating poverty" = 5,
    "Water" = 6,
    "Other, please specify" = 7))
var_label(dat$Education_r3) <- "Which of these initiatives does the Village Head encourage the most? - Option 1"

dat$fact_q98_2 <- labelled(dat$Q_114_O2, labels = c(
    "Education" = 1, 
    "Security" = 2, 
    "Health" = 3,
    "Gender" = 4,
    "Alleviating poverty" = 5,
    "Water" = 6,
    "Other, please specify" = 7))
var_label(dat$Education_r3) <- "Which of these initiatives does the Village Head encourage the most? - Option 2"

dat <- dat %>%
  mutate(
    fact_q98_O = as.character(S_107_other))
label(dat$fact_q98_O) <- "Other specified value for Which of these initiatives does the Village Head encourage the most?"

```

#-----------------------------------------------------------------
# CONFLICT
#-----------------------------------------------------------------
```{r}
dat=single.choice(raw.num =115, new.num=99, other=F, prefix = "fact_q")
dat=numeric.var(raw.num =116,new.num=100,prefix = "fact_q")
dat=free.text.grid(raw.num =117, new.num=101, num.topics = 10,prefix = "fact_q")
dat=free.text.grid(raw.num =118, new.num=102, num.topics = 5,prefix = "fact_q")
dat=single.choice.grid(raw.num =119, new.num=103, num.topics = 7,prefix = "fact_q")

```

#-----------------------------------------------------------------
# ROLE OF VH
#-----------------------------------------------------------------
```{r}
dat=single.choice(raw.num =120, new.num=104, other=T, prefix = "fact_q")
dat=single.choice(raw.num =121, new.num=105, other=F, prefix = "fact_q")
dat=free.text(raw.num =122, new.num=106, prefix = "fact_q")
dat=single.choice(raw.num =123, new.num=107, other=F, prefix = "fact_q")
dat=single.choice(raw.num =124, new.num=108, other=F, prefix = "fact_q")
dat=single.choice(raw.num =125, new.num=109, other=F, prefix = "fact_q")
dat=single.choice(raw.num =126, new.num=110, other=F, prefix = "fact_q")
dat=single.choice(raw.num =127, new.num=111, other=F, prefix = "fact_q")
dat=single.choice(raw.num =128, new.num=112, other=F, prefix = "fact_q")
```

#-----------------------------------------------------------------
# THE REST PART OF CODING IS OMITTED
#-----------------------------------------------------------------

#-----------------------------------------------------------------
# CLEAN LABEL TEXT AND SAVE DATASET
#---------------------------------------------------------------
```{r CreateCodebookTable}

saveRDS(dat,"your/local/path/to/data.csv")


mydf = dfSummary(dat,style = "multiline",graph.col = FALSE,
           valid.col = FALSE, na.rm = TRUE,headings = FALSE,tmp.img.dir = "/tmp",max.string.width = 100,max.distinct.values = 100,labels.col = TRUE,varnumbers = FALSE)

mydf$Variable = gsub(pattern = "labelled, ",replacement = "",x = mydf$Variable)
colnames(mydf)[1:2] = c("Variable Name", "Question Text")

mydf$`Question Text` = gsub("<div>","",mydf$`Question Text`)
mydf$`Question Text` = gsub("</div>","",mydf$`Question Text`)
mydf$`Question Text` = gsub("<p>","",mydf$`Question Text`)
mydf$`Question Text` = gsub("</p>","",mydf$`Question Text`)
mydf$`Question Text` = gsub("<b>","",mydf$`Question Text`)
mydf$`Question Text` = gsub("</b>","",mydf$`Question Text`)
mydf$`Question Text` = gsub("<br>","",mydf$`Question Text`)
mydf$`Question Text` = gsub("</br>","",mydf$`Question Text`)
mydf$`Question Text` = gsub("&nbsp;"," ",mydf$`Question Text`)

mydf$`Freqs (% of Valid)`[grepl("character",mydf$`Variable Name`)] = "Not Applicable"
mydf$`Freqs (% of Valid)`[grepl("numeric",mydf$`Variable Name`)] = "Not Applicable"
mydf$`Stats / Values`[grepl("character",mydf$`Variable Name`)] = "Not Applicable"

mydf$`Variable Name` = paste(mydf$`Variable Name`,"\\\n",sep = "")
mydf$`Question Text` = paste(mydf$`Question Text`,"\\\n",sep = "")
mydf$`Stats / Values` = paste(mydf$`Stats / Values`,"\\\n",sep = "")
mydf$`Freqs (% of Valid)` = paste(mydf$`Freqs (% of Valid)`,"\\\n",sep = "")
mydf$Missing = paste(mydf$Missing,"\\\n",sep = "")

mydf
```

# MAKE STATA VERSION
```{r MakeDataStataFriendly}

make_stata_labels <- function(values_and_codes,df,var){
  #check if the variable is a factor variable
  if(class(unlist(df[,var]))=="factor"){
    #Extract Factor Levels
    answer_choices = levels(unlist(df[,var]))
    #Extract Special Values
    values = as.vector(values_and_codes$values)
    #check if the answer choices pnpntain any of the special values
    if(sum(values %in% answer_choices)>0){
      #Set Up Necessary Items
      codes = as.vector(values_and_codes$codes)
      non.special.values = answer_choices[!(answer_choices %in% values)]
      non.special.num = length(non.special.values)
      special.values = answer_choices[answer_choices %in% values]
      
      #Make a new vector to store the new levels of the variable
      new.levels <- sprintf("null%s", 1:max(codes[values %in% answer_choices]))
      
      #Add in the "Non-Special Levels"
      new.levels[1:non.special.num] = non.special.values
      
      #Add in Special Values
      for(i in 1:length(special.values)){
        val = special.values[i]
        loc = codes[values == val]
        new.levels[loc] = val
      }
      
      #Reset Levels of the Factor Variable
      vec = factor(unlist(df[,var]), levels = new.levels)
    }else{
      vec = unlist(df[,var])
    }
  }else{
    vec = unlist(df[,var])
  }
  return(vec)
}



var.names = colnames(dat)
my.labels = label(dat)
dat = unlabel(dat)
for(i in 1:dim(dat)[2]){
  dat[,i] = make_stata_labels(values_and_codes,dat,var.names[i])
  my.labels[i] = gsub("&nbsp;", "", my.labels[i])
  my.labels[i] = gsub("<.*?>", "", my.labels[i])
}
summarytools::label(dat) = my.labels
```

```{r SaveStataVersionCleanedData}
 
write_dta(dat,"your/local/path/to/data.csv")
```


